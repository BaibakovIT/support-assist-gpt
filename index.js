import express from 'express';
import fetch from 'node-fetch';

const app = express();
app.use(express.urlencoded({ extended: true })); // –¥–ª—è Slash-–∫–æ–º–∞–Ω–¥
app.use(express.json());

// üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã (–∏–∑ Render)
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const ASSISTANT_ID = process.env.ASSISTANT_ID;

// üîê –î–∞–Ω–Ω—ã–µ Mattermost (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–Ω–æ—Å–∏—Ç—å –≤ .env ‚Äî —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã)
const MM_API_TOKEN = 'gnwoiuo19bddfdwjbis6fs6dfo';
const MM_API_BASE = 'https://mmost.x620.net/api/v4';

// === 1. Slash-–∫–æ–º–∞–Ω–¥–∞ Mattermost ===

app.post('/slash/assist', async (req, res) => {
  const { text, user_name, channel_id } = req.body;

  console.log(`üì® –ö–æ–º–∞–Ω–¥–∞ –æ—Ç ${user_name}: ${text}`);

  if (!text) {
    res.send("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ `/assist`");
    return;
  }

  res.send("‚è≥ GPT-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å...");

  try {
    const reply = await getAssistantReply(text);

    const message = `üí¨ **${user_name} —Å–ø—Ä–æ—Å–∏–ª:** ${text}\n\nü§ñ **–û—Ç–≤–µ—Ç:** ${reply}`;
    await postAsBot(channel_id, message);
  } catch (err) {
    console.error("üî• –û—à–∏–±–∫–∞:", err);
    await postAsBot(channel_id, `‚ùå –û—à–∏–±–∫–∞: ${err.message}`);
  }
});

// === 2. –¢–µ—Å—Ç–æ–≤—ã–π POST-–∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä –∏–∑ Postman)

app.post('/support', async (req, res) => {
  const { question } = req.body;

  if (!question) return res.status(400).json({ error: 'Missing question' });

  try {
    const reply = await getAssistantReply(question);
    const text = `üí¨ –ó–∞–ø—Ä–æ—Å: ${question}\n\nü§ñ –û—Ç–≤–µ—Ç: ${reply}`;
    await postAsBot('izy7u9nhaid75pw1677coahtiw', text);
    res.status(200).json({ result: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Mattermost', reply });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.get('/', (_, res) => res.send('‚úÖ GPT Support Assistant —Ä–∞–±–æ—Ç–∞–µ—Ç!'));

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`üöÄ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ http://localhost:${PORT}`));

// === OpenAI Assistant ===

async function getAssistantReply(prompt) {
  console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ thread...');
  const thread = await fetch('https://api.openai.com/v1/threads', {
    method: 'POST',
    headers: openaiHeaders(),
    body: JSON.stringify({})
  }).then(r => r.json());

  await fetch(`https://api.openai.com/v1/threads/${thread.id}/messages`, {
    method: 'POST',
    headers: openaiHeaders(),
    body: JSON.stringify({ role: 'user', content: prompt })
  });

  const run = await fetch(`https://api.openai.com/v1/threads/${thread.id}/runs`, {
    method: 'POST',
    headers: openaiHeaders(),
    body: JSON.stringify({ assistant_id: ASSISTANT_ID })
  }).then(r => r.json());

  let status = 'queued';
  let retries = 15;

  while (status !== 'completed' && retries > 0) {
    await new Promise(r => setTimeout(r, 2000));
    const runCheck = await fetch(`https://api.openai.com/v1/threads/${thread.id}/runs/${run.id}`, {
      headers: openaiHeaders()
    }).then(r => r.json());

    status = runCheck.status;
    console.log(`‚è≥ –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${status}`);
    if (['failed', 'cancelled', 'expired'].includes(status)) {
      throw new Error('–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª run —Å –æ—à–∏–±–∫–æ–π: ' + status);
    }

    retries--;
  }

  const msgRes = await fetch(`https://api.openai.com/v1/threads/${thread.id}/messages`, {
    headers: openaiHeaders()
  }).then(r => r.json());

  const replyMsg = msgRes.data.find(m => m.role === 'assistant');
  const reply = replyMsg?.content?.[0]?.text?.value || 'GPT –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç';
  console.log('‚úÖ –û—Ç–≤–µ—Ç GPT:', reply);
  return reply;
}

// === –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Mattermost –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞ ===

async function postAsBot(channel_id, message) {
  const response = await fetch(`${MM_API_BASE}/posts`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${MM_API_TOKEN}`
    },
    body: JSON.stringify({
      channel_id,
      message
    })
  });

  if (!response.ok) {
    const text = await response.text();
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Mattermost:', text);
  } else {
    console.log('üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Mattermost');
  }
}

// === –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è OpenAI ===

function openaiHeaders() {
  return {
    Authorization: `Bearer ${OPENAI_API_KEY}`,
    'Content-Type': 'application/json'
  };
}
